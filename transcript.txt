*click  - нажатие на стрелочку вниз
**click next - нажатие на стрелочку вправо


1st slide
Good day dear listeners.
My name is Pavel Voitikhovich and today I will tell you a little about React.

2nd slide
The presentation consists of seven small subtopics, let's see:
(Click)
React Components
(Click)
JSX and what is it.
(Click)
Classes of components and functional components.
(Click)
Component lifecycle.
(Click)
a few words about the state.
(click)
React reconciliation
(click)
Properties (props)
This knowledge will allow us to create a react app.
But first, let's understand what is React? React is a tool for creating user interfaces. Its main task is to provide a display of what can be seen on web pages. React makes building interfaces much easier by breaking each page into smaller chunks. We call these fragments components.
(Click next)

3rd slide
(click)
A React component is, simply put, a piece of code that represents part of a web page. Each component is a JavaScript function that returns a piece of code representing a page fragment.
To form the page, we call these functions in a certain order, collect the results of the calls together and show them to the user.
(Click)
This is what the component code looks like. OurFirstComponent() function returns JSX fragment. We can use ReactDOM to render what this code represents on the page.
(click next)

4th slide
Often when learning React, users come across such a concept as "JSX". There is a misunderstanding and the question: “What is it - JSX, and why is this technology so praised?”. Let's figure it out together.
(click)
JSX is a "mix" of JavaScript syntax, HTML, and some CSS. And at its core, it is a tool for distributing page elements within the markup using JavaScript. JSX preaches the idea that you should keep the markup with the power of JavaScript and not separate technologies by placing markup and logic in separate files. Based on this “idea”, React creates its own components that contain both markup and logic inside.
(click)
JSX makes it pretty easy to build complex expressions and embed variables right inside those expressions.
(3 картинка) That is, you can create any variable, in our case it is “name”, and, framing it with curly brackets, insert it into the JSX code. By the way, when you need to insert any JavaScript script inside the JSX code, this is all done using curly braces.
(click next)

5th slide
Let speak about classes of components and functional components.
(click)
Function on screen is a valid React component because it takes a single "props" object argument (which stands for properties) with data and returns a React element. We call such components "functional" because they are literally JavaScript functions.
(click)
Component classes must contain a function called render(). This function returns the JSX code of the component. They can be used in the same way as functional components.
(click)
And why did developers switch to functional components?
here are some reasons
(click)
1. Difficult to reuse state logic across class components.
(click)
2. When a class component grows, it becomes an unmanageable mess of state logic and side effects.
(click)
3. Classes confuse both humans and machines.
To solve all these problems, hooks appeared in react 16.8.
(click)
Hooks are functions that you can use to "hook" to React's state and lifecycle methods from functional components. Hooks don't work inside classes - they give you the ability to use React without classes.
In this example, useState is the hook. We call it to endow our functional component with internal state. React will store this state between renders. The call to useState returns an array with two elements that contains: the current value of the state and a function to update it. This function can be used anywhere, for example, in an event handler. It is similar to this.setState in classes, but does not merge the new and old state together.
(click next)

6th slide
Let's talk about what is the life cycle of a component.
During operation, a component goes through a series of life cycle stages. At each stage, a specific function is called, in which we can define any actions.
(click)
1. constructor(props): constructor where the initialization of the component takes place
(click)
2. static getDerivedStateFromProps(props, state): called just before the component is rendered. This method does not have access to the current component object (that is, refer to the component object via this) and should return an object to update the state object, or null if there is nothing to update.
(click)
3. render(): rendering a component.
(click)
4. componentDidMount(): Called after the component has rendered. Here you can query remote resources
(click)
5. componentWillUnmount(): called before the component is removed from the DOM
all this path together constitutes the life cycle
(click next)

7th slide
A state is all information about an element, including information about its display.
(click)
The state is of two types:
1. local: the useState hook is used to determine such a state.
2. shared: This state is created using the useContext hook (often in combination with the useReducer hook) or libraries like Redux.
(click next)

8th slide
react recanciliation this is the algorithm behind what we used to call 'virtualDOM'.
(click)
It all starts with a basic unit, a node. From them, using a set of render methods, a whole tree of react elements is assembled, which describes the entire state of the elements and is stored in memory. This tree is called current.
Next, this tree enters the rendering environment, and this environment will translate the tree into a set of DOM operations necessary to render the current changes.

At the same time, it prioritizes operations according to the urgency of their hitting the user.When the site is loaded for the first time, the rendering environment renders the entire DOM tree and after that the user sees the site or application in front of him.

Changes to the site, such as clicking a button, result in a change to our site. As a result, a new tree is built and is called work-in-progress.

Next, we compare the work-in-progress tree and the current tree and calculate the difference between them. And already only the difference of these trees is given to the rendering environment. Further, the entire DOM-tree will not be redrawn, but only changes will be made.
(click next)

9th slide
let speak about props.
(click)
React elements can also describe our own components. When React encounters such an element, it collects all JSX attributes and child elements into one object and passes them to our component. This object is called props.A component should never write anything to its props, regardless of whether it is functional or class.
(click)
let's look at the example of the sum function.Such functions are called "pure" because they do not change their inputs and predictably return the same result for the same arguments.
(click)
And here is an example of an impure function - it writes data to its own arguments. React is quite flexible, but there is one rule that must not be broken:
(click)
React components are required to behave like pure functions with respect to their props.
(click next)

That's all I wanted to say today, thanks for watching ,  and have a nice day.
Goodbye
(занавес))))
